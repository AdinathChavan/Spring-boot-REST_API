package com.webapp.sequrity;

import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class UserSecurity {

	private final String SECRET_KEY = "sf45ff31sd32s1312sdf321twe341sgsd321tw3t1wew3y1ee341321twe3213st32wesaety13we";
	
	private final long TOKEN_EXPIRY_DURATION = 5*60000;
	
	public SecretKey getSecretKey() {
		byte[] getBytes = Decoders.BASE64.decode(SECRET_KEY);
		return Keys.hmacShaKeyFor(getBytes);
	}
	
	public String createToken(String emailId) {

		String token = Jwts
				.builder() // creating 
				.subject(emailId) // unique user id
				.issuedAt(new Date(System.currentTimeMillis())) // setting creation time
				.expiration(new Date(System.currentTimeMillis() + TOKEN_EXPIRY_DURATION)) // setting Expire time
				.signWith(getSecretKey())
				.compact();
		
		return token;

	}
	
	//Decode and get user Id from the token
		public String getUserIdFromToken(String token) {
			
				return Jwts.parser() // reading 
					.verifyWith(getSecretKey())
					.build()
					.parseSignedClaims(token)
					.getPayload()
					.getSubject();
		}
		
		private boolean isTokenNotExpired(String token) {
			Date expirtyTime = 
							 Jwts
							.parser()
							.verifyWith(getSecretKey())
							.build()
							.parseSignedClaims(token)
							.getPayload()
					.getExpiration();
			System.out.println("Token Epirty Time : " + expirtyTime);
			return expirtyTime.after(new Date()); // Expire time after current time
													// Ex: expTime : 9.26 after 9.27 : false
													// Ex: expTime : 9.30 after 9.28 : true
		}
		
		public boolean isValidToken(String token, String requestedEmailID) {
			String emailIdFromToken = getUserIdFromToken(token);
			System.out.println("Email Id Retrived From Token : " + emailIdFromToken);
			return emailIdFromToken.equalsIgnoreCase(requestedEmailID) && isTokenNotExpired(token);
		}
}
